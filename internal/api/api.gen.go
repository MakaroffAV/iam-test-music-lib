// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Album Наименование альбома
type Album = string

// Artist Имя исполнителя
type Artist = string

// ErrorResponse Ошибка выполнения запроса
type ErrorResponse struct {
	// Reason Описание ошибки
	Reason *string `json:"reason,omitempty"`
}

// PaginationLimit Лимит на количество записей в ответе
type PaginationLimit = int

// PaginationOffset Смещение для пагинации
type PaginationOffset = int

// Released Дата выпуска песни (в формате ISO 8601)
type Released = openapi_types.Date

// ReleasedFrom Дата выпуска песни (от). Ожидается формат ISO 8601.
type ReleasedFrom = openapi_types.Date

// ReleasedTo Дата выпуска песни (до). Ожидается формат ISO 8601.
type ReleasedTo = openapi_types.Date

// Song Описание песни
type Song struct {
	// Album Наименование альбома
	Album *Album `json:"album,omitempty"`

	// Artist Имя исполнителя
	Artist *Artist `json:"artist,omitempty"`

	// Id Уникальный идентификатор песни
	Id *SongID `json:"id,omitempty"`

	// Released Дата выпуска песни (в формате ISO 8601)
	Released *Released `json:"released,omitempty"`

	// Title Наименование песни
	Title *SongName `json:"title,omitempty"`

	// Youtube Ссылка на песню на YouTube
	Youtube *Youtube `json:"youtube,omitempty"`
}

// SongID Уникальный идентификатор песни
type SongID = string

// SongName Наименование песни
type SongName = string

// Text Текст песни. Чтобы разделять куплеты,
// используется последовательность `$$`.
//
// Если она отсутствует, считается, что весь текст — это один куплет.
type Text = string

// Verse defines model for verse.
type Verse struct {
	// Id Уникальный идентификатор куплета песни
	Id *string `json:"id,omitempty"`

	// OrderNum Порядковый номер куплета песни
	OrderNum *float32 `json:"orderNum,omitempty"`

	// SongID Уникальный идентификатор песни
	SongID *SongID `json:"songID,omitempty"`

	// Text Куплет песни
	Text *string `json:"text,omitempty"`
}

// Youtube Ссылка на песню на YouTube
type Youtube = string

// SongSearchParams defines parameters for SongSearch.
type SongSearchParams struct {
	Limit        *PaginationLimit  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset       *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`
	Text         *Text             `form:"text,omitempty" json:"text,omitempty"`
	Title        *SongName         `form:"title,omitempty" json:"title,omitempty"`
	Album        *Album            `form:"album,omitempty" json:"album,omitempty"`
	Artist       *Artist           `form:"artist,omitempty" json:"artist,omitempty"`
	Youtube      *Youtube          `form:"youtube,omitempty" json:"youtube,omitempty"`
	ReleasedFrom *ReleasedFrom     `form:"released_from,omitempty" json:"released_from,omitempty"`
	ReleasedTo   *ReleasedTo       `form:"released_to,omitempty" json:"released_to,omitempty"`
}

// SongCreateJSONBody defines parameters for SongCreate.
type SongCreateJSONBody struct {
	// Album Наименование альбома
	Album Album `json:"album"`

	// Artist Имя исполнителя
	Artist Artist `json:"artist"`

	// Released Дата выпуска песни (в формате ISO 8601)
	Released Released `json:"released"`

	// Text Текст песни. Чтобы разделять куплеты,
	// используется последовательность `$$`.
	//
	// Если она отсутствует, считается, что весь текст — это один куплет.
	Text Text `json:"text"`

	// Title Наименование песни
	Title SongName `json:"title"`

	// Youtube Ссылка на песню на YouTube
	Youtube Youtube `json:"youtube"`
}

// SongUpdateJSONBody defines parameters for SongUpdate.
type SongUpdateJSONBody struct {
	// Album Имя альбома, в который входит песня
	Album *string `json:"album,omitempty"`

	// Artist Имя исполнителя
	Artist *string `json:"artist,omitempty"`

	// Released Дата выпуска песни (в формате ISO 8601)
	Released *openapi_types.Date `json:"released,omitempty"`

	// Title Наименование песни
	Title *string `json:"title,omitempty"`

	// Youtube Ссылка на песню на YouTube
	Youtube *string `json:"youtube,omitempty"`
}

// SongVersesParams defines parameters for SongVerses.
type SongVersesParams struct {
	Limit  *PaginationLimit  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`
}

// SongCreateJSONRequestBody defines body for SongCreate for application/json ContentType.
type SongCreateJSONRequestBody SongCreateJSONBody

// SongUpdateJSONRequestBody defines body for SongUpdate for application/json ContentType.
type SongUpdateJSONRequestBody SongUpdateJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Ping request
	Ping(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SongSearch request
	SongSearch(ctx context.Context, params *SongSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SongCreateWithBody request with any body
	SongCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SongCreate(ctx context.Context, body SongCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SongDelete request
	SongDelete(ctx context.Context, songID SongID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SongUpdateWithBody request with any body
	SongUpdateWithBody(ctx context.Context, songID SongID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SongUpdate(ctx context.Context, songID SongID, body SongUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SongVerses request
	SongVerses(ctx context.Context, songID SongID, params *SongVersesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Ping(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SongSearch(ctx context.Context, params *SongSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSongSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SongCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSongCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SongCreate(ctx context.Context, body SongCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSongCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SongDelete(ctx context.Context, songID SongID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSongDeleteRequest(c.Server, songID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SongUpdateWithBody(ctx context.Context, songID SongID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSongUpdateRequestWithBody(c.Server, songID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SongUpdate(ctx context.Context, songID SongID, body SongUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSongUpdateRequest(c.Server, songID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SongVerses(ctx context.Context, songID SongID, params *SongVersesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSongVersesRequest(c.Server, songID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPingRequest generates requests for Ping
func NewPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSongSearchRequest generates requests for SongSearch
func NewSongSearchRequest(server string, params *SongSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Text != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, *params.Text); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Album != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "album", runtime.ParamLocationQuery, *params.Album); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Artist != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "artist", runtime.ParamLocationQuery, *params.Artist); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Youtube != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "youtube", runtime.ParamLocationQuery, *params.Youtube); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReleasedFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "released_from", runtime.ParamLocationQuery, *params.ReleasedFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReleasedTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "released_to", runtime.ParamLocationQuery, *params.ReleasedTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSongCreateRequest calls the generic SongCreate builder with application/json body
func NewSongCreateRequest(server string, body SongCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSongCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSongCreateRequestWithBody generates requests for SongCreate with any type of body
func NewSongCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/song/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSongDeleteRequest generates requests for SongDelete
func NewSongDeleteRequest(server string, songID SongID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "songID", runtime.ParamLocationPath, songID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/song/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSongUpdateRequest calls the generic SongUpdate builder with application/json body
func NewSongUpdateRequest(server string, songID SongID, body SongUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSongUpdateRequestWithBody(server, songID, "application/json", bodyReader)
}

// NewSongUpdateRequestWithBody generates requests for SongUpdate with any type of body
func NewSongUpdateRequestWithBody(server string, songID SongID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "songID", runtime.ParamLocationPath, songID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/song/%s/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSongVersesRequest generates requests for SongVerses
func NewSongVersesRequest(server string, songID SongID, params *SongVersesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "songID", runtime.ParamLocationPath, songID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/song/%s/verse", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PingWithResponse request
	PingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingResponse, error)

	// SongSearchWithResponse request
	SongSearchWithResponse(ctx context.Context, params *SongSearchParams, reqEditors ...RequestEditorFn) (*SongSearchResponse, error)

	// SongCreateWithBodyWithResponse request with any body
	SongCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SongCreateResponse, error)

	SongCreateWithResponse(ctx context.Context, body SongCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SongCreateResponse, error)

	// SongDeleteWithResponse request
	SongDeleteWithResponse(ctx context.Context, songID SongID, reqEditors ...RequestEditorFn) (*SongDeleteResponse, error)

	// SongUpdateWithBodyWithResponse request with any body
	SongUpdateWithBodyWithResponse(ctx context.Context, songID SongID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SongUpdateResponse, error)

	SongUpdateWithResponse(ctx context.Context, songID SongID, body SongUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SongUpdateResponse, error)

	// SongVersesWithResponse request
	SongVersesWithResponse(ctx context.Context, songID SongID, params *SongVersesParams, reqEditors ...RequestEditorFn) (*SongVersesResponse, error)
}

type PingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SongSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Song
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SongSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SongSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SongCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Song
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SongCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SongCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SongDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SongDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SongDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SongUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Song
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SongUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SongUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SongVersesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Verse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SongVersesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SongVersesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PingWithResponse request returning *PingResponse
func (c *ClientWithResponses) PingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingResponse, error) {
	rsp, err := c.Ping(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingResponse(rsp)
}

// SongSearchWithResponse request returning *SongSearchResponse
func (c *ClientWithResponses) SongSearchWithResponse(ctx context.Context, params *SongSearchParams, reqEditors ...RequestEditorFn) (*SongSearchResponse, error) {
	rsp, err := c.SongSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSongSearchResponse(rsp)
}

// SongCreateWithBodyWithResponse request with arbitrary body returning *SongCreateResponse
func (c *ClientWithResponses) SongCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SongCreateResponse, error) {
	rsp, err := c.SongCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSongCreateResponse(rsp)
}

func (c *ClientWithResponses) SongCreateWithResponse(ctx context.Context, body SongCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SongCreateResponse, error) {
	rsp, err := c.SongCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSongCreateResponse(rsp)
}

// SongDeleteWithResponse request returning *SongDeleteResponse
func (c *ClientWithResponses) SongDeleteWithResponse(ctx context.Context, songID SongID, reqEditors ...RequestEditorFn) (*SongDeleteResponse, error) {
	rsp, err := c.SongDelete(ctx, songID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSongDeleteResponse(rsp)
}

// SongUpdateWithBodyWithResponse request with arbitrary body returning *SongUpdateResponse
func (c *ClientWithResponses) SongUpdateWithBodyWithResponse(ctx context.Context, songID SongID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SongUpdateResponse, error) {
	rsp, err := c.SongUpdateWithBody(ctx, songID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSongUpdateResponse(rsp)
}

func (c *ClientWithResponses) SongUpdateWithResponse(ctx context.Context, songID SongID, body SongUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SongUpdateResponse, error) {
	rsp, err := c.SongUpdate(ctx, songID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSongUpdateResponse(rsp)
}

// SongVersesWithResponse request returning *SongVersesResponse
func (c *ClientWithResponses) SongVersesWithResponse(ctx context.Context, songID SongID, params *SongVersesParams, reqEditors ...RequestEditorFn) (*SongVersesResponse, error) {
	rsp, err := c.SongVerses(ctx, songID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSongVersesResponse(rsp)
}

// ParsePingResponse parses an HTTP response from a PingWithResponse call
func ParsePingResponse(rsp *http.Response) (*PingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSongSearchResponse parses an HTTP response from a SongSearchWithResponse call
func ParseSongSearchResponse(rsp *http.Response) (*SongSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SongSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Song
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSongCreateResponse parses an HTTP response from a SongCreateWithResponse call
func ParseSongCreateResponse(rsp *http.Response) (*SongCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SongCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Song
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSongDeleteResponse parses an HTTP response from a SongDeleteWithResponse call
func ParseSongDeleteResponse(rsp *http.Response) (*SongDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SongDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSongUpdateResponse parses an HTTP response from a SongUpdateWithResponse call
func ParseSongUpdateResponse(rsp *http.Response) (*SongUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SongUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Song
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSongVersesResponse parses an HTTP response from a SongVersesWithResponse call
func ParseSongVersesResponse(rsp *http.Response) (*SongVersesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SongVersesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Verse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /ping)
	Ping(w http.ResponseWriter, r *http.Request)

	// (GET /search)
	SongSearch(w http.ResponseWriter, r *http.Request, params SongSearchParams)

	// (POST /song/create)
	SongCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /song/{songID}/delete)
	SongDelete(w http.ResponseWriter, r *http.Request, songID SongID)

	// (PATCH /song/{songID}/update)
	SongUpdate(w http.ResponseWriter, r *http.Request, songID SongID)

	// (GET /song/{songID}/verse)
	SongVerses(w http.ResponseWriter, r *http.Request, songID SongID, params SongVersesParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /ping)
func (_ Unimplemented) Ping(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /search)
func (_ Unimplemented) SongSearch(w http.ResponseWriter, r *http.Request, params SongSearchParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /song/create)
func (_ Unimplemented) SongCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /song/{songID}/delete)
func (_ Unimplemented) SongDelete(w http.ResponseWriter, r *http.Request, songID SongID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PATCH /song/{songID}/update)
func (_ Unimplemented) SongUpdate(w http.ResponseWriter, r *http.Request, songID SongID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /song/{songID}/verse)
func (_ Unimplemented) SongVerses(w http.ResponseWriter, r *http.Request, songID SongID, params SongVersesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Ping(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SongSearch operation middleware
func (siw *ServerInterfaceWrapper) SongSearch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SongSearchParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "text" -------------

	err = runtime.BindQueryParameter("form", true, false, "text", r.URL.Query(), &params.Text)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "text", Err: err})
		return
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", r.URL.Query(), &params.Title)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "title", Err: err})
		return
	}

	// ------------- Optional query parameter "album" -------------

	err = runtime.BindQueryParameter("form", true, false, "album", r.URL.Query(), &params.Album)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "album", Err: err})
		return
	}

	// ------------- Optional query parameter "artist" -------------

	err = runtime.BindQueryParameter("form", true, false, "artist", r.URL.Query(), &params.Artist)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "artist", Err: err})
		return
	}

	// ------------- Optional query parameter "youtube" -------------

	err = runtime.BindQueryParameter("form", true, false, "youtube", r.URL.Query(), &params.Youtube)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "youtube", Err: err})
		return
	}

	// ------------- Optional query parameter "released_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "released_from", r.URL.Query(), &params.ReleasedFrom)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "released_from", Err: err})
		return
	}

	// ------------- Optional query parameter "released_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "released_to", r.URL.Query(), &params.ReleasedTo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "released_to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SongSearch(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SongCreate operation middleware
func (siw *ServerInterfaceWrapper) SongCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SongCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SongDelete operation middleware
func (siw *ServerInterfaceWrapper) SongDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "songID" -------------
	var songID SongID

	err = runtime.BindStyledParameterWithOptions("simple", "songID", chi.URLParam(r, "songID"), &songID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "songID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SongDelete(w, r, songID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SongUpdate operation middleware
func (siw *ServerInterfaceWrapper) SongUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "songID" -------------
	var songID SongID

	err = runtime.BindStyledParameterWithOptions("simple", "songID", chi.URLParam(r, "songID"), &songID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "songID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SongUpdate(w, r, songID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SongVerses operation middleware
func (siw *ServerInterfaceWrapper) SongVerses(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "songID" -------------
	var songID SongID

	err = runtime.BindStyledParameterWithOptions("simple", "songID", chi.URLParam(r, "songID"), &songID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "songID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SongVersesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SongVerses(w, r, songID, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ping", wrapper.Ping)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/search", wrapper.SongSearch)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/song/create", wrapper.SongCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/song/{songID}/delete", wrapper.SongDelete)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/song/{songID}/update", wrapper.SongUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/song/{songID}/verse", wrapper.SongVerses)
	})

	return r
}
